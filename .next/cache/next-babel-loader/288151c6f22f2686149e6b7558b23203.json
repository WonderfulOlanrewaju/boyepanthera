{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport GhostContentAPI from \"@tryghost/content-api\";\nimport Keys from '../config.js'; // Create API instance with site credentials\n\nvar api = new GhostContentAPI({\n  url: Keys.url,\n  key: Keys.env.key,\n  version: Keys.env.version\n});\nexport function getPosts() {\n  return _regeneratorRuntime.async(function getPosts$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(api.posts.browse({\n            limit: \"all\"\n          })[\"catch\"](function (err) {\n            console.error(err);\n          }));\n\n        case 2:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 3:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n}\nexport function getSinglePost(postSlug) {\n  return _regeneratorRuntime.async(function getSinglePost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(api.posts.read({\n            slug: postSlug\n          })[\"catch\"](function (err) {\n            console.error(err);\n          }));\n\n        case 2:\n          return _context2.abrupt(\"return\", _context2.sent);\n\n        case 3:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  });\n}","map":{"version":3,"sources":["C:/Users/Fincon/Downloads/Buddspot/boyepanthera/api/posts.js"],"names":["GhostContentAPI","Keys","api","url","key","env","version","getPosts","posts","browse","limit","err","console","error","getSinglePost","postSlug","read","slug"],"mappings":";AAAA,OAAOA,eAAP,MAA4B,uBAA5B;AACA,OAAOC,IAAP,MAAiB,cAAjB,C,CAEA;;AACA,IAAMC,GAAG,GAAG,IAAIF,eAAJ,CAAoB;AAC9BG,EAAAA,GAAG,EAAEF,IAAI,CAACE,GADoB;AAE9BC,EAAAA,GAAG,EAAEH,IAAI,CAACI,GAAL,CAASD,GAFgB;AAG9BE,EAAAA,OAAO,EAAEL,IAAI,CAACI,GAAL,CAASC;AAHY,CAApB,CAAZ;AAMA,OAAO,SAAeC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACUL,GAAG,CAACM,KAAJ,CACVC,MADU,CACH;AACNC,YAAAA,KAAK,EAAE;AADD,WADG,WAIJ,UAAAC,GAAG,EAAI;AACZC,YAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACD,WANU,CADV;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUP,OAAO,SAAeG,aAAf,CAA6BC,QAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACUb,GAAG,CAACM,KAAJ,CACVQ,IADU,CACL;AACJC,YAAAA,IAAI,EAAEF;AADF,WADK,WAIJ,UAAAJ,GAAG,EAAI;AACZC,YAAAA,OAAO,CAACC,KAAR,CAAcF,GAAd;AACD,WANU,CADV;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import GhostContentAPI from \"@tryghost/content-api\";\r\nimport Keys from '../config.js';\r\n\r\n// Create API instance with site credentials\r\nconst api = new GhostContentAPI({\r\n  url: Keys.url,\r\n  key: Keys.env.key,\r\n  version: Keys.env.version\r\n});\r\n\r\nexport async function getPosts() {\r\n    return await api.posts\r\n      .browse({\r\n        limit: \"all\"\r\n      })\r\n      .catch(err => {\r\n        console.error(err);\r\n      });\r\n  }\r\n\r\nexport async function getSinglePost(postSlug) {\r\n    return await api.posts\r\n      .read({\r\n        slug: postSlug\r\n      })\r\n      .catch(err => {\r\n        console.error(err);\r\n      });\r\n  }"]},"metadata":{},"sourceType":"module"}